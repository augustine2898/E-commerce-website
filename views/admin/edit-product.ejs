<%- include("../../views/partials/admin/header") %>

    <head>
        <style>
            .thumbnails-container {
                display: flex;
                overflow-x: auto;
            }


            .thumbnail {
                margin-right: 10px;
            }

            .input-upload {
                position: relative;
            }


            .error-message {
                color: red;
                display: none;
            }
        </style>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
    </head>
    <section class="content-main">
        <div class="row">
            <div class="col-9">
                <div class="content-header">
                    <h2 class="content-title">Edit Product</h2>


                </div>
            </div>
            <div class="col-lg-6">
                <div class="card mb-4">


                    <div class="card-body">
                        <form method="post" action="/admin/editProduct/<%=product._id%>" enctype="multipart/form-data"
                            onsubmit="return validateForm()">
                            <div class="mb-4">
                                <label for="product_name" class="form-label">Product Name</label>
                                <input type="text" name="productName" value="<%=product.productName%>"
                                    class="form-control border" id="product_name">
                                <div id="productName-error" class="error-message"></div>
                            </div>
                            <!-- <div class="col-lg-4 mb-4">
                               <label class="form-label">Brand</label>
                               <select class="form-select border" name="brand">
                                  
                                       <option value="">
                                          
                                       </option>
                                      
                               </select>
                               <div id="brand-error" class="error-message"></div>


                           </div> -->
                            <<div class="mb-4">
                                <label class="form-label">Full description</label>
                                <textarea name="descriptionData" class="form-control border"
                                    rows="4"><%= product.description %></textarea>
                                <div id="description-error" class="error-message"></div>
                    </div>
                    <div class="row">
                        <div class="col-lg-4">
                            <div class="mb-4">
                                <label class="form-label">Regular price</label>
                                <input placeholder="$" name="regularPrice" type="text" value="<%=product.regularPrice%>"
                                    class="form-control border">
                                <div id="regularPrice-error" class="error-message"></div>
                            </div>
                        </div>
                        <div class="col-lg-4">
                            <div class="mb-4">
                                <label class="form-label">Sale price</label>
                                <input name="salePrice" type="text" value="<%=product.salePrice%>"
                                    class="form-control border">
                            </div>
                            <div id="salePrice-error" class="error-message"></div>
                        </div>
                        <div class="col-lg-4">
                            <div class="mb-4">
                                <label class="form-label">Quantity</label>
                                <input name="quantity" type="text" value="<%=product.quantity%>"
                                    class="form-control border">
                                <div id="quantity-error" class="error-message"></div>
                            </div>
                        </div>
                    </div>
                    <div class="row">

                        <div class="col-lg-4">
                            <div class="mb-4">
                                <label class="form-label">Color</label>
                                <input name="color" type="text" value="<%=product.color%>" class="form-control border">
                                <div id="color-error" class="error-message"></div>
                            </div>
                        </div>

                    </div>
                    <div class="card mb-4">


                        <div class="card-body">
                            <div class="col-sm-6 mb-3">
                                <label class="form-label">Category</label>
                                <select class="form-select border" style="width: 150px;" name="category">
                                    <%for(let i=0;i<cat.length;i++){%>
                                        <option value="<%=cat[i]._id%>">
                                            <%=cat[i].name%>

                                        </option>
                                        <%}%>
                                </select>


                                <div id="category-error" class="error-message"></div>
                            </div>
                        </div>
                    </div>
                    <div class="row gx-2">

                    </div>
                    <div class="card mb-2">
                        <div class="card-header">
                            <h4>Choose images</h4>
                        </div>
                        <%for(let i=0;i<product.productImage.length;i++){%>
                            <div class="col-md-12">
                                <div class="mb-4">
                                    <div class="col-12">
                                        <td>
                                            <input type="hidden" value="" id="imageDatas">
                                            <img class="rounded" style="width: 50px; height: 60px;"
                                                src="/uploads/product-image/resized/<%=product.productImage[i]%>"
                                                alt="">
                                            <i onclick="deleteSingleImage('<%=product.productImage[i]%>','<%=product._id%>')"
                                                style="position: absolute; margin-left: .5rem; cursor: pointer;"
                                                class="fa-thin fa-x"></i>
                                        </td>
                                    </div>
                                    <%}%>
                                </div>
                            </div>


                            <div class="card-body">
                                <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                    <img src="" alt="" id="imgView1">
                                    <input class="form-control" type="file" name="images" id="input1"
                                        accept="image/png, image/jpeg, image/jpg"
                                        onchange="viewImage1(event), viewImage(event, 1)">
                                    <div id="images-error" class="error-message"></div>
                                </div>
                                <div class="image-cropper d-flex align-items-center"
                                    style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                    <img src="" id="croppedImg1" alt="">
                                    <button type="button" id="saveButton1" class="btn-sm btn-primary">Save</button>
                                </div>
                                <div class="row">
                                    <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                        <img src="" alt="" id="imgView2">
                                        <input class="form-control" type="file" name="images" id="input2"
                                            accept="image/png, image/jpeg, image/jpg"
                                            onchange="viewImage2(event),viewImage(event, 2)">
                                    </div>
                                    <div class="image-cropper d-flex align-items-center"
                                        style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                        <img src="" id="croppedImg2" alt="">
                                        <button type="button" id="saveButton2" class="btn-sm btn-primary">Save</button>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                        <img src="" alt="" id="imgView3">
                                        <input class="form-control" type="file" name="images" id="input3"
                                            accept="image/png, image/jpeg, image/jpg"
                                            onchange="viewImage3(event),viewImage(event, 3)">
                                    </div>
                                    <div class="image-cropper d-flex align-items-center"
                                        style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                        <img src="" id="croppedImg3" alt="">
                                        <button type="button" id="saveButton3" class="btn-sm btn-primary">Save</button>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                        <img src="" alt="" id="imgView4">
                                        <input class="form-control" type="file" name="images" id="input4"
                                            accept="image/png, image/jpeg, image/jpg"
                                            onchange="viewImage4(event),viewImage(event, 4)">
                                    </div>
                                    <div class="image-cropper d-flex align-items-center"
                                        style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                        <img src="" id="croppedImg4" alt="">
                                        <button type="button" id="saveButton4" class="btn-sm btn-primary">Save</button>
                                    </div>
                                </div>
                            </div>
                    </div>
                    <div>


                        <button class="btn btn-md rounded font-sm hover-up" id="updatebtn" type="button"
                            onclick="validateAndSubmit()">Update</button>

                        <a href="/admin/products" class="btn btn-md rounded font-sm hover-up"
                            style="background-color: #3167eb;">Cancel</a>
                    </div>
                    </form>
                </div>
            </div>
        </div>
        </div>
        </div>
    </section>
    <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>

    <%- include("../../views/partials/admin/footer") %>

        <script>


            function validateAndSubmit() {
                if (validateForm()) {
                    document.forms[0].submit();
                }
            }




            function validateForm() {
                let imageDatas = false
                console.log("validate form");
                clearErrorMessages();
                const name = document.getElementsByName('productName')[0].value;
                const description = document.getElementsByName('descriptionData')[0].value;
                console.log("Description:", description);
                const price = document.getElementsByName('regularPrice')[0].value;
                const saleprice = document.getElementsByName('salePrice')[0].value;
                const color = document.getElementsByName('color')[0].value;
                const category = document.getElementsByName('category')[0].value;
                const images = document.getElementById('input1');
                const quantity = document.getElementsByName('quantity')[0].value;
                let isValid = true;

                // Product Name validation
                if (name.trim() === "") {
                    Swal.fire('Validation Error', 'Please enter a product name.', 'error');
                    isValid = false;
                } else if (!/^[a-zA-Z\s]+$/.test(name.trim())) {
                    Swal.fire('Validation Error', 'Product name should contain only alphabetic characters.', 'error');
                    isValid = false;
                }

                // Product Description validation
                if (description.trim() === "") {
                    Swal.fire('Validation Error', 'Please enter a product description.', 'error');
                    isValid = false;
                } else if (!/^[a-zA-Z0-9\s.,'’"#$%&'()*+/-:;<=>?@[\\\]^_`{|}~]+$/.test(description.trim())) {
                    Swal.fire('Validation Error', 'Product description contains invalid characters.', 'error');
                    isValid = false;
                }

                // Quantity validation
                if (parseInt(quantity) < 0 || isNaN(quantity)) {
                    Swal.fire('Validation Error', 'Please enter a valid non-negative quantity.', 'error');
                    isValid = false;
                }

                // Regular Price validation
                if (!/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) < 0) {
                    Swal.fire('Validation Error', 'Please enter a valid non-negative regular price.', 'error');
                    isValid = false;
                }

                // Sale Price validation
                if (!/^\d+(\.\d{1,2})?$/.test(saleprice) || parseFloat(saleprice) < 0) {
                    Swal.fire('Validation Error', 'Please enter a valid non-negative sale price.', 'error');
                    isValid = false;
                }
                if (parseFloat(price) <= parseFloat(saleprice)) {
                    Swal.fire('Validation Error', 'Regular price must be greater than sale price.', 'error');
                    isValid = false;
                }

                // Color validation
                if (color.trim() === "") {
                    Swal.fire('Validation Error', 'Please enter a color.', 'error');
                    isValid = false;
                }

                // Image validation
                if (images.files.length > 0) {
            
                }

                return isValid;
            }


            function displayErrorMessage(elementId, message) {
                var errorElement = document.getElementById(elementId);
                errorElement.innerText = message;
                errorElement.style.display = "block";
            }


            function clearErrorMessages() {
                const errorElements = document.getElementsByClassName('error-message');
                Array.from(errorElements).forEach(element => {
                    element.innerText = '';
                });
                const errorMessage = document.getElementById('errorMessage');


            }




            function viewImage1(event) {
                document.getElementById('imgView1').src = URL.createObjectURL(event.target.files[0])
            }


            function viewImage2(event) {
                document.getElementById('imgView2').src = URL.createObjectURL(event.target.files[0])
            }


            function viewImage3(event) {
                document.getElementById('imgView3').src = URL.createObjectURL(event.target.files[0])
            }


            function viewImage4(event) {
                document.getElementById('imgView4').src = URL.createObjectURL(event.target.files[0])
            }




            function viewImage(event, index) {
                let input = event.target;
                let reader = new FileReader();
                reader.onload = function () {
                    let dataURL = reader.result;
                    let image = document.getElementById('imgView' + index);
                    image.src = dataURL;
                    let cropper = new Cropper(image, {
                        aspectRatio: NaN, // Allow free cropping
                        viewMode: 2, // Keep the crop box within the image bounds
                        guides: true,
                        background: false,
                        autoCropArea: 1, // Crop box covers the whole image initially
                        movable: true, // Allow moving the image within the crop box
                        zoomable: true, // Allow zooming
                        scalable: true, // Allow scaling of the crop box
                        cropBoxResizable: true // Allow resizing of the crop box
                    });
                    let cropperContainer = document.querySelector('#croppedImg' + index).parentNode;
                    cropperContainer.style.display = 'block';
                    let saveButton = document.querySelector('#saveButton' + index);
                    saveButton.addEventListener('click', async function () {
                        let croppedCanvas = cropper.getCroppedCanvas();
                        let croppedImage = document.getElementById("croppedImg" + index);
                        croppedImage.src = croppedCanvas.toDataURL('image/jpeg', 1.0);
                        let timestamp = new Date().getTime();
                        let fileName = `cropped-img-${timestamp}-${index}.png`;
                        await croppedCanvas.toBlob(blob => {
                            let input = document.getElementById('input' + index);
                            let imgFile = new File([blob], fileName, blob)
                            const fileList = new DataTransfer();
                            fileList.items.add(imgFile);
                            input.files = fileList.files
                        });
                        cropperContainer.style.display = 'none';
                    });
                };
                reader.readAsDataURL(input.files[0]);
            }


            document.addEventListener("DOMContentLoaded", function () {
                const selectedImages = [];

                // Array of input IDs
                const inputIds = ["input1", "input2", "input3", "input4"];

                // Loop through each input ID and add an event listener
                inputIds.forEach((id) => {
                    const inputElement = document.getElementById(id);
                    if (inputElement) {
                        inputElement.addEventListener("change", function (event) {
                            handleFileSelect(event, id);
                        });
                    } else {
                        console.error(`Element with ID '${id}' not found.`);
                    }
                });
            });


            function handleFileSelect(event) {
                const addedImagesContainer = document.getElementById("addedImagesContainer");
                addedImagesContainer.innerHTML = "";
                const files = event.target.files;
                for (let i = 0; i < files.length; i++) {
                    const file = files[i];
                    selectedImages.push(file);
                    const thumbnail = document.createElement("div");
                    thumbnail.classList.add("thumbnail");
                    const img = document.createElement("img");
                    img.src = URL.createObjectURL(file);
                    img.alt = "thumbnail";
                    img.style.width = "50px";
                    img.style.height = "auto";
                    const removeIcon = document.createElement("span");
                    removeIcon.classList.add("remove-icon");
                    removeIcon.innerHTML = "&times;";
                    removeIcon.addEventListener("click", function () {
                        const index = selectedImages.indexOf(file);
                        if (index !== -1) {
                            selectedImages.splice(index, 1);
                        }
                        thumbnail.remove();
                    });
                    thumbnail.appendChild(img);
                    thumbnail.appendChild(removeIcon);
                    addedImagesContainer.appendChild(thumbnail);
                }
            };

            function deleteSingleImage(imageId, productId) {
                $.ajax({
                    url: "/admin/deleteImage",
                    method: 'POST',
                    data: { imageNameToServer: imageId, productIdToServer: productId },
                    success: ((response) => {
                        if (response.status === true) {
                            window.location.reload()
                        }
                    })
                })
            }


            function deleteproduct(productId) {
                Swal.fire({
                    title: 'Are you sure?',
                    text: "This category will be permanently deleted!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Yes, delete it!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Call your delete endpoint
                        fetch(`/admin/removeProduct/${productId}`, {
                            method: 'DELETE', // Use DELETE method
                            headers: {
                                'Content-Type': 'application/json', // Ensure content type is JSON
                            },
                        })
                            .then(response => {
                                if (!response.ok) {
                                    return response.json().then(err => {
                                        throw new Error(err.error || 'An error occurred');
                                    });
                                }
                                return response.json();
                            })
                            .then(data => {
                                Swal.fire(
                                    'Deleted!',
                                    data.message, // Success message from your API
                                    'success'
                                ).then(() => {
                                    location.reload(); // Reload the page to see the changes
                                });
                            })
                            .catch(error => {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Oops...',
                                    text: error.message || 'An error occurred while deleting the category',
                                });
                            });
                    }
                });
            }
        </script>