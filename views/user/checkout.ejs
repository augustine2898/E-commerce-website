<%- include("../partials/user/header") %>
    <style>
        .bi-trash {
            border: none;
            background: none;
            cursor: pointer;
        }


        .bi-trash:hover {
            color: red;
        }

        #edit-address-link {
            margin-right: 10px;
            /* Adds space between the Edit and Add buttons */
        }
    </style>
    <link rel="stylesheet"
        href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.10.5/font/bootstrap-icons.min.css">
    <form id="orderForm" action="/checkout/place-order" method="POST">
        <div class="untree_co-section">
            <div class="container">
                <div class="row">
                    <div class="col-md-6 mb-5 mb-md-0">
                        <h2 class="h3 mb-3 text-black">Billing Details</h2>
                        <div class="p-3 p-lg-5 border bg-white">
                            <!-- Existing Address Selection -->
                            <div class="form-group">
                                <label for="c_select_address" class="text-black">Select Existing Address</label>
                                <div class="d-flex align-items-center">
                                    <select id="c_select_address" name="c_select_address" class="form-control me-2">
                                        <option value="">Select an address</option>
                                        <% addresses.forEach(function(address) { %>
                                            <% address.address.forEach(function(addr) { %>
                                                <option value="<%= address._id %>">
                                                    <%= addr.addressDetail %>, <%= addr.city %>, <%= addr.state %> - <%=
                                                                    addr.pincode %>
                                                </option>
                                                <% }) %>
                                                    <% }) %>
                                    </select>
                                    <a href="#" id="edit-address-link" class="btn-small"
                                        onclick="handleEditClick(event)">Edit</a>
                                    <span><a href="#" id="add-address-link" class="btn-small"
                                            onclick="openAddAddressPopup()">Add</a></span>

                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- <div class="col-md-6">
                        <div class="row mb-5">
                            <div class="col-md-12">
                                <label class="text-black h4" for="coupon">Coupon</label>
                                <p>Enter your coupon code if you have one.</p>
                            </div>
                            <div class="col-md-8 mb-3 mb-md-0">
                                <input type="text" class="form-control py-3" id="coupon" placeholder="Coupon Code">
                            </div>
                            <div class="col-md-4">
                                <button type="button" class="btn btn-black" onclick="applyCoupon()">Apply
                                    Coupon</button>
                            </div>

                            <div id="couponFeedback" class="col-md-6 text-right">
                                <% if (cart.couponCode) { %>
                                    <strong class="text-black">
                                        <%= cart.couponCode %>
                                    </strong>
                                    <button class="bi bi-trash" onclick="removeCoupon()"></button>
                                    <% } else { %>
                                        <div>
                                            <span class="text-muted">No coupon applied</span>
                                        </div>
                                        <% } %>
                            </div>
                        </div>
                    </div> -->

                    <div class="row mb-5">
                        <div class="col-md-12">
                            <h2 class="h3 mb-3 text-black">Your Order</h2>
                            <div class="p-3 p-lg-5 border bg-white">
                                <table class="table site-block-order-table mb-5">
                                    <thead>
                                        <th>Product</th>
                                        <th>Total</th>
                                    </thead>
                                    <tbody>
                                        <% cartItems.forEach(item=> { %>
                                            <tr>
                                                <td>
                                                    <%= item.productId.productName %> <strong class="mx-2">x</strong>
                                                        <%= item.quantity %>
                                                </td>
                                                <td>₹<%= (item.price * item.quantity).toFixed(2) %>
                                                </td>
                                            </tr>
                                            <% }) %>
                                                <tr>
                                                    <td class="text-black font-weight-bold"><strong>Cart
                                                            Subtotal</strong></td>
                                                    <td class="text-black">₹<%= subtotal.toFixed(2) %>
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td class="text-black font-weight-bold"><strong>Discount</strong>
                                                    </td>
                                                    <td class="text-black font-weight-bold">
                                                        <strong>₹ <%= couponDetails ? couponDetails.discount.toFixed(2)
                                                                : '0.00' %></strong>
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td class="text-black font-weight-bold"><strong>Shipping</strong>
                                                    </td>
                                                    <td class="text-black">
                                                        <p>
                                                            <% if (shippingCharge===0) { %>
                                                                <span style="color: green;">Free</span>
                                                                <% } else { %>
                                                                    ₹<%= shippingCharge.toFixed(2) %>
                                                                        <% } %>
                                                        </p>
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td class="text-black font-weight-bold"><strong>Order Total</strong>
                                                    </td>
                                                    <td class="text-black">₹<%= total.toFixed(2) %>
                                                    </td>
                                                </tr>

                                    </tbody>
                                </table>

                                <!-- Payment Method -->
                                <div class="border p-3 mb-3">
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" id="cashOnDelivery"
                                            name="payment_method" value="cash_on_delivery">
                                        <label class="form-check-label h6 mb-0" for="cashOnDelivery">Cash on
                                            Delivery</label>
                                    </div>
                                </div>

                                <div class="border p-3 mb-3">
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" id="razorPay" name="payment_method"
                                            value="razorpay">
                                        <label class="form-check-label h6 mb-0" for="razorPay">Online payment</label>
                                    </div>
                                </div>

                                <div class="border p-3 mb-3">
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" id="wallet" name="payment_method"
                                            value="wallet">
                                        <label class="form-check-label h6 mb-0" for="razorPay">Wallet</label>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <button class="btn btn-black btn-lg py-3 btn-block" type="submit">Place
                                        Order</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>


    </form>
    <div class="modal fade" id="addressModal" tabindex="-1" aria-labelledby="addressModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addressModalLabel">Enter Your Address</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="addressForm" method="post" onsubmit="saveNewAddress(event); return false;">
                        <div class="col-md-12 mb-5 mb-md-0">
                            <div class="p-3 p-lg-5 border bg-white">
                                <!-- Address Type -->
                                <div class="form-group row">
                                    <div class="col-md-12">
                                        <label for="addressType" class="text-black">Address Type <span
                                                class="text-danger">*</span></label>
                                        <select class="form-control" id="addressType" name="addressType" required>
                                            <option value="Home">Home</option>
                                            <option value="Office">Office</option>
                                            <option value="Other">Other</option>
                                        </select>
                                    </div>
                                </div>

                                <!-- First Name and Last Name -->
                                <div class="form-group row">
                                    <div class="col-md-6">
                                        <label for="fname" class="text-black">First Name <span
                                                class="text-danger">*</span></label>
                                        <input type="text" class="form-control" id="fname" name="firstName" required>
                                    </div>
                                    <div class="col-md-6">
                                        <label for="lname" class="text-black">Last Name <span
                                                class="text-danger">*</span></label>
                                        <input type="text" class="form-control" id="lname" name="lastName" required>
                                    </div>
                                </div>

                                <!-- Address -->
                                <div class="form-group row">
                                    <div class="col-md-12">
                                        <div class="mb-3">
                                            <label for="address" class="text-black">Address <span
                                                    class="text-danger">*</span></label>
                                            <textarea class="form-control" name="addressDetail" id="address" rows="3"
                                                required></textarea>
                                        </div>
                                    </div>
                                </div>

                                <!-- Landmark -->
                                <div class="form-group row">
                                    <div class="col-md-12">
                                        <label for="landmark" class="text-black">Landmark<span
                                                class="text-danger">*</span></label>
                                        <input type="text" class="form-control" id="landmark" name="landmark" required>
                                    </div>
                                </div>

                                <!-- City -->
                                <div class="form-group row">
                                    <div class="col-md-12">
                                        <label for="city" class="text-black">City<span
                                                class="text-danger">*</span></label>
                                        <input type="text" class="form-control" id="city" name="city" required>
                                    </div>
                                </div>

                                <!-- State and Zip Code -->
                                <div class="form-group row">
                                    <div class="col-md-6">
                                        <label for="stateIn" class="text-black">State <span
                                                class="text-danger">*</span></label>
                                        <input type="text" class="form-control" id="stateIn" name="state" required>
                                    </div>
                                    <div class="col-md-6">
                                        <label for="zip" class="text-black">Postal / Zip <span
                                                class="text-danger">*</span></label>
                                        <input type="text" class="form-control" id="zip" name="zip" required>
                                    </div>
                                </div>

                                <!-- Phone Number and Alternate Phone -->
                                <div class="form-group row mb-5">
                                    <div class="col-md-6">
                                        <label for="phone" class="text-black">Phone <span
                                                class="text-danger">*</span></label>
                                        <input type="text" class="form-control" id="phone" name="phone" required
                                            placeholder="Phone Number">
                                    </div>
                                    <div class="col-md-6">
                                        <label for="altPhone" class="text-black">Alternate Phone (Optional)</label>
                                        <input type="text" class="form-control" id="altPhone" name="altPhone"
                                            placeholder="Alternate Phone Number">
                                    </div>
                                </div>

                                <!-- Submit Button -->
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                <button type="submit" class="btn btn-success">Submit</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>



    <%- include("../partials/user/footer") %>
        <script>

            function openAddAddressPopup() {
                const modal = new bootstrap.Modal(document.getElementById('addressModal'));
                modal.show();
            }



            function saveNewAddress(event) {
                event.preventDefault();

                if (!validateForm()) {
                    return;  
                }

                const newAddress = {
                    addressType: document.getElementById('addressType').value,
                    firstName: document.getElementById('fname').value,
                    lastName: document.getElementById('lname').value,
                    address: document.getElementById('address').value,
                    city: document.getElementById('city').value,
                    state: document.getElementById('stateIn').value,
                    landmark: document.getElementById('landmark').value,
                    pincode: document.getElementById('zip').value,
                    phone: document.getElementById('phone').value,
                    altPhone: document.getElementById('altPhone').value || ''
                };

                Swal.fire({
                    title: 'Are you sure?',
                    text: 'Do you want to save this address?',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonText: 'Yes, Save Address',
                    cancelButtonText: 'No, Cancel',
                    reverseButtons: true
                }).then((result) => {
                    if (result.isConfirmed) {
                        fetch('/checkoutaddAddress', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(newAddress),
                        })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    // Create the new option for the address select
                                    const addressSelect = document.getElementById('c_select_address');
                                    const newOption = document.createElement('option');
                                    newOption.value = data.newAddressId;
                                    newOption.textContent = `${newAddress.address}, ${newAddress.city}, ${newAddress.state} - ${newAddress.pincode}`;
                                    addressSelect.appendChild(newOption);

                                    // Hide the modal after saving the address
                                    const modal = bootstrap.Modal.getInstance(document.getElementById('addressModal'));
                                    modal.hide();

                                    // Show SweetAlert success message
                                    Swal.fire({
                                        title: 'Address Saved!',
                                        text: data.message || 'Your new address has been successfully added.',
                                        icon: 'success',
                                        confirmButtonText: 'OK'
                                    }).then(() => {
                                        // Redirect to the checkout page after the success alert
                                        window.location.href = '/checkout'; // Redirect to checkout page
                                    });
                                } else {
                                    Swal.fire({
                                        title: 'Failed to Save Address',
                                        text: data.message || 'Please try again.',
                                        icon: 'error',
                                        confirmButtonText: 'OK'
                                    });
                                }
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                Swal.fire({
                                    title: 'Error',
                                    text: 'Something went wrong while saving the address.',
                                    icon: 'error',
                                    confirmButtonText: 'OK'
                                });
                            });
                    }
                });
            }


            function validateForm() {
                let isValid = true;
                let errorMessages = [];

                // Validate first name
                const fname = document.getElementById('fname').value.trim();
                if (!fname) {
                    errorMessages.push('First name is required.');
                    isValid = false;
                } else if (!/^[A-Za-z\s'-]+$/.test(fname)) {
                    errorMessages.push('Invalid first name.');
                    isValid = false;
                }

                // Validate last name
                const lname = document.getElementById('lname').value.trim();
                if (!lname) {
                    errorMessages.push('Last name is required.');
                    isValid = false;
                } else if (!/^[A-Za-z\s'-]+$/.test(lname)) {
                    errorMessages.push('Invalid last name.');
                    isValid = false;
                }

                //validate city

                const city = document.getElementById('city').value.trim();
                if (!lname) {
                    errorMessages.push('City is required.');
                    isValid = false;
                } else if (!/^[A-Za-z\s'-]+$/.test(city)) {
                    errorMessages.push('Invalid City name.');
                    isValid = false;
                }

                // Validate landmark
                const landmark = document.getElementById('landmark').value.trim();
                if (!landmark) {
                    errorMessages.push('Landmark is required.');
                    isValid = false;
                }

                // Validate address
                const address = document.getElementById('address').value.trim();
                if (!address) {
                    errorMessages.push('Address is required.');
                    isValid = false;
                }

                // Validate state
                const state = document.getElementById('stateIn').value.trim();
                if (!state) {
                    errorMessages.push('State is required.');
                    isValid = false;
                } else if (!/^[A-Za-z\s'-]+$/.test(state)) {
                    errorMessages.push('Invalid state.');
                    isValid = false;
                }

                // Validate zip code
                const zip = document.getElementById('zip').value.trim();
                if (!zip) {
                    errorMessages.push('Zip code is required.');
                    isValid = false;
                } else if (!/^\d+$/.test(zip)) {
                    errorMessages.push('Invalid zip code.');
                    isValid = false;
                }

                // Validate phone number
                const phone = document.getElementById('phone').value.trim();
                if (!phone) {
                    errorMessages.push('Phone number is required.');
                    isValid = false;
                } else if (!/^\d{10}$/.test(phone)) {
                    errorMessages.push('Invalid phone number. Must be 10 digits.');
                    isValid = false;
                }

                // Show SweetAlert for any validation errors
                if (!isValid) {
                    Swal.fire({
                        title: 'Validation Error!',
                        text: errorMessages.join(' '),
                        icon: 'warning',
                        confirmButtonText: 'Okay'
                    });
                }

                return isValid;
            }

        </script>
        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
        <script>


            // Get the form element by its ID
            const form = document.getElementById('orderForm');


            form.addEventListener('submit', async function (e) {
                e.preventDefault();

                // Show a confirmation dialog before proceeding
                Swal.fire({
                    title: 'Are you sure?',
                    text: 'Do you want to place this order? You can review your order details before confirming.',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonText: 'Yes, Place Order',
                    cancelButtonText: 'No, Cancel',
                    reverseButtons: true
                }).then(async (result) => {
                    if (result.isConfirmed) {
                        // Proceed if user confirmed the order
                        const paymentMethod = document.querySelector('input[name="payment_method"]:checked').value;
                        console.log(paymentMethod)
                        if (!paymentMethod) {
                            Swal.fire({
                                title: 'Payment Method Required',
                                text: 'Please select a payment method to place your order.',
                                icon: 'warning',
                                confirmButtonText: 'OK'
                            });
                            return;
                        }

                        try {
                            const response = await fetch('/checkout/place-order', {
                                method: "POST",
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    c_select_address: document.querySelector('#c_select_address').value,
                                    payment_method: paymentMethod,
                                })
                            });

                            const data = await response.json();

                            if (response.ok) {
                                if (paymentMethod === 'razorpay') {
                                    // Trigger Razorpay payment flow
                                    var options = {
                                        "key": "rzp_test_BbOrMS3clwhzdK",
                                        "amount": data.totalAmount * 100,
                                        "currency": "INR",
                                        "name": "Furni",
                                        "description": "Test Transaction",
                                        "order_id": data.razorpayOrderId,
                                        "handler": async function (paymentResponse) {

                                            const verifyResponse = await fetch('/verify-payment', {
                                                method: 'POST',
                                                headers: {
                                                    'Content-Type': 'application/json',
                                                },
                                                body: JSON.stringify({
                                                    payment: paymentResponse,
                                                    order: data.orderId,
                                                }),
                                            });

                                            const verifyData = await verifyResponse.json();
                                            if (verifyResponse.ok) {
                                                Swal.fire({
                                                    title: 'Payment Successful!',
                                                    text: 'Your order has been placed successfully. Redirecting to the shop page...',
                                                    icon: 'success',
                                                    timer: 3000,
                                                    showConfirmButton: false,
                                                }).then(() => {
                                                    window.location.href = `/shop`;
                                                });
                                            } else {
                                                Swal.fire({
                                                    title: 'Payment Verification Failed!',
                                                    text: verifyData.message || 'Please try again.',
                                                    icon: 'error',
                                                    confirmButtonText: 'OK',
                                                });
                                            }
                                        },
                                        "prefill": {
                                            "name": "Gaurav Kumar",
                                            "email": "gaurav.kumar@example.com",
                                            "contact": "9000090000"
                                        },
                                        "theme": {
                                            "color": "#3399cc"
                                        },
                                    };
                                    const rzp1 = new Razorpay(options);
                                    rzp1.open();
                                } else if (paymentMethod === 'wallet' || paymentMethod === 'cash_on_delivery') {
                                    Swal.fire({
                                        title: 'Payment Successful!',
                                        text: 'Your order has been placed successfully. Redirecting to the shop page...',
                                        icon: 'success',
                                        timer: 3000,
                                        showConfirmButton: false,
                                    }).then(() => {
                                        window.location.href = `/shop`;
                                    });
                                }
                            } else {
                                Swal.fire({
                                    title: 'Order Placement Failed!',
                                    text: data.message || 'Please try again.',
                                    icon: 'error',
                                    confirmButtonText: 'OK',
                                });
                            }
                        } catch (error) {
                            console.error('Error during order placement:', error);
                            Swal.fire({
                                title: 'Error!',
                                text: 'An error occurred while placing your order. Please try again.',
                                icon: 'error',
                                confirmButtonText: 'OK',
                            });
                        }
                    } else {
                        console.log('Order was not placed');
                    }
                });
            });

            async function applyCoupon() {
                const couponCode = document.getElementById('coupon').value.trim();
                if (!couponCode) {
                    Swal.fire({
                        title: 'Error',
                        text: 'Please enter a coupon code',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                    return;
                }

                try {
                    const response = await fetch('/apply-coupon', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ couponCode })
                    })

                    const data = await response.json();

                    if (response.ok) {
                        const totalPriceElement = document.getElementById('totalPrice');
                        if (totalPriceElement) {
                            totalPriceElement.textContent = data.finalTotal.toFixed(2);
                        } else {
                            console.error("Element with ID 'totalPrice' not found in the DOM.");
                        }

                        Swal.fire({
                            title: 'Success',
                            text: `Coupon applied! Discount: $${data.discount.toFixed(2)}`,
                            icon: 'success',
                            confirmButtonText: 'OK'
                        }).then(() => {
                            window.location.reload();
                        })
                    } else {
                        Swal.fire({
                            title: 'Error',
                            text: data.message || 'Failed to apply coupon.',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                } catch (error) {
                    console.error('Error applying coupon:', error);
                    Swal.fire({
                        title: 'Error',
                        text: 'An error occurred while applying the coupon.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                }
            }


            async function removeCoupon() {
                const totalPriceElement = document.getElementById('totalPrice');
                const couponFeedback = document.getElementById('couponFeedback');

                const confirmation = await Swal.fire({
                    title: 'Are you sure?',
                    text: "Do you want to remove the applied coupon?",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, remove it!'
                });

                if (confirmation.isConfirmed) {
                    try {
                        const response = await fetch('/remove-coupon', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' }
                        });

                        const result = await response.json();

                        if (response.ok) {
                            if (totalPriceElement && result.finalTotal != null) {
                                totalPriceElement.textContent = `$${result.finalTotal.toFixed(2)}`;
                            }

                            if (couponFeedback) {
                                couponFeedback.innerHTML = `
                        <div>
                            <span class="text-muted">No coupon applied</span>
                        </div>
                    `;
                            }

                            Swal.fire({
                                title: 'Coupon Removed!',
                                text: result.message,
                                icon: 'success',
                                confirmButtonText: 'OK'
                            });
                        } else {
                            Swal.fire({
                                title: 'Error',
                                text: result.message || 'Failed to remove coupon.',
                                icon: 'error',
                                confirmButtonText: 'OK'
                            });
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        Swal.fire({
                            title: 'Error',
                            text: 'An unexpected error occurred. Please try again.',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                }
            }

        </script>




        <script>
           
            function updateEditLink() {
                const selectedAddressId = document.querySelector('#c_select_address').value;
                const editLink = document.querySelector('#edit-address-link');

                if (selectedAddressId) {
                    editLink.href = `/editAddresscheckout/${selectedAddressId}`;
                    editLink.style.pointerEvents = 'auto';  // Enable clicking
                    editLink.style.color = '';  // Reset to default link color
                } else {
                    editLink.href = '#';
                    editLink.style.pointerEvents = 'none';  // Disable clicking
                    editLink.style.color = 'gray';  // Gray out the link
                }
            }

            
            function handleEditClick(event) {
                const selectedAddressId = document.querySelector('#c_select_address').value;

                if (!selectedAddressId) {
                    event.preventDefault();  // Prevent navigation

                    Swal.fire({
                        icon: 'warning',
                        title: 'Address Not Selected',
                        text: 'Please select an address before editing.',
                        confirmButtonText: 'OK'
                    });
                }
            }

            document.addEventListener('DOMContentLoaded', () => {
                updateEditLink();  // Initialize the link based on the selected address

                // Attach the handleEditClick function to the edit link's click event
                const editLink = document.querySelector('#edit-address-link');
                if (editLink) {
                    editLink.addEventListener('click', handleEditClick);
                }

                // Update the edit link when the address selection changes
                const addressSelect = document.querySelector('#c_select_address');
                if (addressSelect) {
                    addressSelect.addEventListener('change', updateEditLink);
                }
            });
        </script>