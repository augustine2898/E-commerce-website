<%- include("../../views/partials/admin/header") %>

    <head>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
    </head>

    <style>
        .error-message {
            color: red;
        }

        .thumbnails-container {
            display: flex;
            overflow-x: auto;
        }

        .thumbnail {
            margin-right: 10px;
        }
    </style>

    <section class="content-main">
        <div class="row">
            <div class="col-9">
                <div class="content-header">
                    <h2 class="content-title">Add New Product</h2>
                </div>
            </div>

            <div class="col-lg-6">
                <div class="card mb-4">
                    <div class="card-body">
                        <form method="POST" action="/admin/addProducts" enctype="multipart/form-data"
                            onsubmit="return validateForm()">
                            <div class="mb-4">
                                <label for="product_name" class="form-label">Product Name</label>
                                <input type="text" placeholder="Type here" name="productName"
                                    class="form-control border" id="product_name">
                                <div id="productName-error" class="error-message"></div>
                            </div>

                            <div class="mb-4">
                                <label class="form-label">Full description</label>
                                <textarea placeholder="Type here" id="descriptionid" name="description"
                                    class="form-control border" rows="4"></textarea>
                                <div id="description-error" class="error-message"></div>
                            </div>

                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Regular price</label>
                                        <input placeholder="$" name="regularPrice" type="text"
                                            class="form-control border">
                                        <div id="regularPrice-error" class="error-message"></div>
                                    </div>
                                </div>

                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Sale price</label>
                                        <input placeholder="$" name="salePrice" type="text" class="form-control border">
                                        <div id="salePrice-error" class="error-message"></div>
                                    </div>
                                </div>

                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Quantity</label>
                                        <input placeholder="" name="quantity" type="text" class="form-control border">
                                        <div id="quantity-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Color</label>
                                        <input name="color" type="text" class="form-control border">
                                        <div id="color-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>

                            <div class="card mb-4">
                                <div class="card-body">
                                    <div class="row gx-2">
                                        <div class="col-sm-6 mb-3">
                                            <label class="form-label">Category</label>
                                            <select class="form-select border" name="category">
                                                <% for(let i=0; i<cat.length; i++) { %>
                                                    <option value="<%= cat[i].name %>">
                                                        <%= cat[i].name %>
                                                    </option>
                                                    <% } %>
                                            </select>
                                            <div id="category-error" class="error-message"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="card mb-2">
                                <div class="card-header">
                                    <h4>Choose images</h4>
                                </div>
                                <div class="border row">
                                    <div id="addedImagesContainer" class="thumbnails-container"></div>
                                </div>

                                <!-- Image Inputs and Cropping Sections -->
                                <div class="row">
                                    <% for (let i=1; i <=4; i++) { %>
                                        <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                            <img src="" alt="" id="imgView<%= i %>">
                                            <input class="form-control" type="file" name="image" id="input<%= i %>"
                                                accept="image/png, image/jpeg, image/jpg"
                                                onchange=" viewImage(event,<%=i%>) ">
                                        </div>
                                        <div class="image-cropper d-flex align-items-center"
                                            style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                            <img src="" id="croppedImg<%= i %>" alt="">
                                            <button type="button" id="saveButton<%= i %>"
                                                class="btn-sm btn-primary">Save</button>
                                        </div>


                                        <% } %>
                                </div>

                            </div>

                            <div>
                                <button class="btn btn-md rounded font-sm hover-up" type="submit">Publish</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
    <script>
        async function viewImage(event, index) {
            let input = event.target;
            let reader = new FileReader();
            reader.onload = function () {
                let dataURL = reader.result;
                let image = document.getElementById("imgView" + index);
                image.src = dataURL;

                let cropper = new Cropper(image, {
                    aspectRatio: NaN, // Allow free cropping
                    viewMode: 2, // Keep the crop box within the image bounds
                    guides: true,
                    background: false,
                    autoCropArea: 1, // Crop box covers the whole image initially
                    movable: true, // Allow moving the image within the crop box
                    zoomable: true, // Allow zooming
                    scalable: true, // Allow scaling of the crop box
                    cropBoxResizable: true // Allow resizing of the crop box
                });

                let cropperContainer = document.querySelector("#croppedImg" + index).parentNode;
                cropperContainer.style.display = 'block';

                let saveButton = document.querySelector("#saveButton" + index);
                saveButton.addEventListener('click', async function () {
                    let croppedCanvas = cropper.getCroppedCanvas();
                    let croppedImage = document.getElementById("croppedImg" + index);
                    croppedImage.src = croppedCanvas.toDataURL('image/jpeg', 1.0);

                    let timestamp = new Date().getTime();
                    let fileName = `cropped-img-${timestamp}-${index}.png`;

                    await croppedCanvas.toBlob(blob => {
                        let input = document.getElementById('input' + index);
                        let imgFile = new File([blob], fileName, { type: "image/png" });
                        const fileList = new DataTransfer();
                        fileList.items.add(imgFile);
                        input.files = fileList.files;
                    });

                    cropperContainer.style.display = 'none';
                    cropper.destroy();
                });
            };

            reader.readAsDataURL(input.files[0]);
        }


        function validateForm() {
            clearErrorMessages();  // Optionally clear old messages in the UI
            const name = document.getElementsByName('productName')[0].value;
            const description = document.getElementById('descriptionid').value;
            const price = document.getElementsByName('regularPrice')[0].value;
            const saleprice = document.getElementsByName('salePrice')[0].value;
            const color = document.getElementsByName('color')[0].value;
            const category = document.getElementsByName('category')[0].value;
            const images = document.getElementById('input1');
            const quantity = document.getElementsByName('quantity')[0].value;
            let isValid = true;

            // Product Name validation
            if (name.trim() === "") {
                Swal.fire('Validation Error', 'Please enter a product name.', 'error');
                isValid = false;
            } else if (!/^[a-zA-Z\s]+$/.test(name.trim())) {
                Swal.fire('Validation Error', 'Product name should contain only alphabetic characters.', 'error');
                isValid = false;
            }

            // Product Description validation
            if (description.trim() === "") {
                Swal.fire('Validation Error', 'Please enter a product description.', 'error');
                isValid = false;
            } else if (!/^[a-zA-Z0-9\s.,'!"#$%&'()*+/-:;<=>?@[\\\]^_`{|}~]+$/.test(description.trim())) {
                Swal.fire('Validation Error', 'Product description contains invalid characters.', 'error');
                isValid = false;
            }

            // Quantity validation
            if (parseInt(quantity) < 0 || isNaN(quantity)) {
                Swal.fire('Validation Error', 'Please enter a valid non-negative quantity.', 'error');
                isValid = false;
            }

            // Regular Price validation
            if (!/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) < 0) {
                Swal.fire('Validation Error', 'Please enter a valid non-negative regular price.', 'error');
                isValid = false;
            }

            // Sale Price validation
            if (!/^\d+(\.\d{1,2})?$/.test(saleprice) || parseFloat(saleprice) < 0) {
                Swal.fire('Validation Error', 'Please enter a valid non-negative sale price.', 'error');
                isValid = false;
            }
            if (parseFloat(price) <= parseFloat(saleprice)) {
                Swal.fire('Validation Error', 'Regular price must be greater than sale price.', 'error');
                isValid = false;
            }

            // Color validation
            if (color.trim() === "") {
                Swal.fire('Validation Error', 'Please enter a color.', 'error');
                isValid = false;
            }

            // Image validation
            if (images.files.length === 0) {
                Swal.fire('Validation Error', 'Please select an image.', 'error');
                isValid = false;
            }

            return isValid;
        }


        function displayErrorMessage(elementId, message) {
            var errorElement = document.getElementById(elementId);
            errorElement.innerText = message;
            errorElement.style.display = "block";
        }


        function clearErrorMessages() {
            const errorElements = document.getElementsByClassName('error-message');
            Array.from(errorElements).forEach(element => {
                element.innerText = '';
            });
            const errorMessage = document.getElementById('errorMessage');


        }




    </script>

    <%- include("../../views/partials/admin/footer") %>