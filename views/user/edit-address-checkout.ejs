<%- include("../partials/user/header")%>
<form id="editAddressForm" style="display: flex; justify-content: center;" method="post">
    <div class="col-md-6 mb-5 mb-md-0">
      <div class="p-3 p-lg-5 border bg-white" style="margin-top: 70px;">
        <h1 style="text-align: center; margin-bottom: 10px; text-decoration: underline;">Edit your Details</h1>

        <div class="form-group row">
          <div class="col-md-6">
            <label for="fname" class="text-black">First Name <span class="text-danger">*</span></label>
            <input type="text" class="form-control" id="fname" name="firstName" value="<%= address.address[0].name.split(' ')[0] %>" required>
          </div>
          <div class="col-md-6">
            <label for="lname" class="text-black">Last Name <span class="text-danger">*</span></label>
            <input type="text" class="form-control" id="lname" name="lastName" value="<%= address.address[0].name.split(' ')[1] || '' %>" required>
          </div>
        </div>

        <div class="form-group row">
          <div class="col-md-12">
            <label for="landmark" class="text-black">Landmark <span class="text-danger">*</span></label>
            <input type="text" class="form-control" id="landmark" name="landmark" value="<%= address.address[0].landMark %>" required>
          </div>
        </div>

        <div class="form-group row">
            <div class="col-md-12">
              <div class="mb-3">
                <label for="address" class="text-black">Address <span class="text-danger">*</span></label>
                <textarea class="form-control" name="addressDetail" id="address" rows="3" required><%= address.address[0].addressDetail || '' %></textarea>
              </div>
            </div>
        </div>

        <div class="form-group row">
          <div class="col-md-12">
            <label for="city" class="text-black">City<span class="text-danger">*</span></label>
            <input type="text" class="form-control" id="city" name="city" value="<%=address.address[0].city%>" required>
          </div>
        </div>

        <div class="form-group row">
          <div class="col-md-6">
            <label for="state" class="text-black">State <span class="text-danger">*</span></label>
            <input type="text" class="form-control" id="stateIn" name="state" value="<%= address.address[0].state %>" required>
          </div>
          <div class="col-md-6">
            <label for="zip" class="text-black">Postal / Zip <span class="text-danger">*</span></label>
            <input type="text" class="form-control" id="zip" name="zip" value="<%= address.address[0].pincode %>" required>
          </div>
        </div>

        <div class="form-group row mb-5">
          <div class="col-md-6">
            <label for="phone" class="text-black">Phone <span class="text-danger">*</span></label>
            <input type="text" class="form-control" id="phone" name="phone" value="<%= address.address[0].phone %>" required placeholder="Phone Number">
          </div>
          <div class="col-md-6">
            <label for="altPhone" class="text-black">Alternate Phone (Optional)</label>
            <input type="text" class="form-control" id="altPhone" name="altPhone" value="<%= address.address[0].altPhone %>" placeholder="Alternate Phone Number">
          </div>
        </div>

        <button type="submit" class="btn btn-success">Submit</button>
      </div>
    </div>
  </form>
  <%- include("../partials/user/footer") %>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>
    document.getElementById('editAddressForm').addEventListener('submit', async function (e) {
      e.preventDefault();

      // Validate form and collect data as before
      const isValid = validateForm();

      if (isValid) {
        const formData = new FormData(this);
        const data = Object.fromEntries(formData.entries());

        try {
          const response = await fetch('/editAddresscheckout/<%= address.id %>', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
          });

          const result = await response.json();

          if (response.ok) {
            await Swal.fire({
              title: 'Success!',
              text: result.message,
              icon: 'success',
              confirmButtonText: 'Okay'
            });
            setTimeout(() => {
              window.location.href = "/checkout";
            }, 1000);
          } else {
            await Swal.fire({
              title: 'Error!',
              text: result.message || 'An error occurred.',
              icon: 'error',
              confirmButtonText: 'Okay'
            });
          }
        } catch (error) {
          await Swal.fire({
            title: 'Error!',
            text: 'An unexpected error occurred.',
            icon: 'error',
            confirmButtonText: 'Okay'
          });
        }
      }
    });

    function validateForm() {
      let isValid = true;
      let errorMessages = [];

      // Validate first name
      const fname = document.getElementById('fname').value.trim();
      if (!fname) {
        errorMessages.push('First name is required.');
        isValid = false;
      } else if (!/^[A-Za-z\s'-]+$/.test(fname)) {
        errorMessages.push('Invalid first name.');
        isValid = false;
      }

      // Validate last name
      const lname = document.getElementById('lname').value.trim();
      if (!lname) {
        errorMessages.push('Last name is required.');
        isValid = false;
      } else if (!/^[A-Za-z\s'-]+$/.test(lname)) {
        errorMessages.push('Invalid last name.');
        isValid = false;
      }

      // Validate landmark
      const landmark = document.getElementById('landmark').value.trim();
      if (!landmark) {
        errorMessages.push('Landmark is required.');
        isValid = false;
      }

      // Validate address
      const address = document.getElementById('address').value.trim();
      if (!address) {
        errorMessages.push('Address is required.');
        isValid = false;
      }

      //validate city

      const city = document.getElementById('city').value.trim();
      if (!lname) {
        errorMessages.push('City is required.');
        isValid = false;
      } else if (!/^[A-Za-z\s'-]+$/.test(city)) {
        errorMessages.push('Invalid City name.');
        isValid = false;
      }

      // Validate state
      const state = document.getElementById('stateIn').value.trim();
      if (!state) {
        errorMessages.push('State is required.');
        isValid = false;
      } else if (!/^[A-Za-z\s'-]+$/.test(state)) {
        errorMessages.push('Invalid state.');
        isValid = false;
      }

      // Validate zip code
      const zip = document.getElementById('zip').value.trim();
      if (!zip) {
        errorMessages.push('Zip code is required.');
        isValid = false;
      } else if (!/^\d+$/.test(zip)) {
        errorMessages.push('Invalid zip code.');
        isValid = false;
      }

      // Validate phone number
      const phone = document.getElementById('phone').value.trim();
      if (!phone) {
        errorMessages.push('Phone number is required.');
        isValid = false;
      } else if (!/^\d{10}$/.test(phone)) {
        errorMessages.push('Invalid phone number. Must be 10 digits.');
        isValid = false;
      }

      // Show SweetAlert for any validation errors
      if (!isValid) {
        Swal.fire({
          title: 'Validation Error!',
          text: errorMessages.join(' '),
          icon: 'warning',
          confirmButtonText: 'Okay'
        });
      }

      return isValid;
    }


  </script>



